# Generated by Django 3.0.6 on 2020-06-15 00:52

import django.contrib.postgres.fields.citext
import django.core.validators
from django.db import migrations, models
from django.contrib.postgres.operations import CITextExtension


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        CITextExtension(),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', django.contrib.postgres.fields.citext.CIEmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('is_active', models.BooleanField(default=True, help_text='\n    Designates whether this user account should be considered active.<br/>\n    <strong>NOTE:</strong> Recommended that you set this flag to False instead of deleting accounts; \n    that way, if any applications store foreign keys to users, the foreign keys wonâ€™t break.\n  ')),
                ('is_staff', models.BooleanField(default=False, help_text='\n    Designates whether this user can access the admin site.\n  ')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date Joined (UTC)')),
                ('company_name', models.CharField(blank=True, max_length=50, verbose_name='Company')),
                ('business_phone', models.CharField(blank=True, max_length=30, verbose_name='Phone')),
                ('country_iso', models.CharField(choices=[('CAN', 'Canada'), ('USA', 'United States')], default='CAN', max_length=3, verbose_name='Country')),
                ('province_iso', models.CharField(choices=[('AB', 'Alberta'), ('BC', 'British Columbia'), ('MB', 'Manitoba'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NS', 'Nova Scotia'), ('NT', 'Northwest Territories'), ('NU', 'Nunavut'), ('ON', 'Ontario'), ('PE', 'Prince Edward Island'), ('QC', 'Quebec'), ('SK', 'Saskatchewan'), ('YT', 'Yukon')], default='ON', max_length=2, verbose_name='Province')),
                ('city', models.CharField(blank=True, max_length=30)),
                ('address', models.CharField(blank=True, max_length=30)),
                ('postal_code', models.CharField(blank=True, max_length=30)),
                ('hst_number', models.CharField(blank=True, max_length=30, verbose_name='HST Number')),
                ('discount_ratio', models.DecimalField(decimal_places=2, default=0, help_text='\n    Designates whether this user can access the admin site.\n  ', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Discount')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
    ]
